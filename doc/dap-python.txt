================================================================================
Python extension for nvim-dap                                       *dap-python*

M.test_runner                                           *dap-python.test_runner*
     Test runner to use by default. Default is "unittest". See |dappy.test_runners|
     Override this to set a different runner:
     ```
     require('dap-python').test_runner = "pytest"
     ```

    Type: ~
        (string)  name of the test runner


M.bdd_test_runner                                   *dap-python.bdd_test_runner*
     BDD test runner to use by default. Default is "behave". See |dappy.bdd_test_runners|
     Override this to set a different runner:
     ```
     require('dap-python').bdd_test_runner = "my_custom_runner"
     ```

    Type: ~
        (string)  name of the bdd test runner


M.bdd_test_runners                                 *dap-python.bdd_test_runners*
     Table to register test runners.
     Built-in is a test runner for cucumber.
     The key is the test runner name, the value a function to generate the
     module name to run and its arguments. See |BDDTestRunner|

    Type: ~
        (table)  <string, BDDTestRunner>


M.setup({adapter_python_path}, {opts})                        *dap-python.setup*
     Register the python debug adapter

    Parameters: ~
        {adapter_python_path}  (string|nil)  Path to the python interpreter. Path must be absolute or in $PATH and needs to have the debugpy package installed. Default is `python3`
        {opts}                 (SetupOpts)   See |SetupOpts|


M.test_class({opts})                                     *dap-python.test_class*
     Run test class above cursor

    Parameters: ~
        {opts}  (DebugOpts)  See |DebugOpts|


M.test_method({opts})                                   *dap-python.test_method*
     Run the test method above cursor

    Parameters: ~
        {opts}  (DebugOpts)  See |DebugOpts|


M.test_feature({opts})                                 *dap-python.test_feature*
     Run feature above cursor

    Parameters: ~
        {opts}  (BDDDebugOpts)  See |BDDDebugOpts|


M.test_scenario({opts})                               *dap-python.test_scenario*
     Run the scenario above cursor

    Parameters: ~
        {opts}  (BDDDebugOpts)  See |BDDDebugOpts|


M.debug_selection({opts})                           *dap-python.debug_selection*
     Debug the selected code

    Parameters: ~
        {opts}  (DebugOpts)  


PathMapping                                                        *PathMapping*


    Fields: ~
        {localRoot}   (string)  
        {remoteRoot}  (string)  


DebugpyConfig                                                    *DebugpyConfig*


    Fields: ~
        {django}           (boolean|nil)        Enable django templates. Default is `false`
        {gevent}           (boolean|nil)        Enable debugging of gevent monkey-patched code. Default is `false`
        {jinja}            (boolean|nil)        Enable jinja2 template debugging. Default is `false`
        {justMyCode}       (boolean|nil)        Debug only user-written code. Default is `true`
        {pathMappings}     (PathMapping[]|nil)  Map of local and remote paths.
        {pyramid}          (boolean|nil)        Enable debugging of pyramid applications
        {redirectOutput}   (boolean|nil)        Redirect output to debug console. Default is `false`
        {showReturnValue}  (boolean|nil)        Shows return value of function when stepping
        {sudo}             (boolean|nil)        Run program under elevated permissions. Default is `false`


DebugpyLaunchConfig                                        *DebugpyLaunchConfig*
    : DebugpyConfig

    Fields: ~
        {module}       (string|nil)      Name of the module to debug
        {program}      (string|nil)      Absolute path to the program
        {code}         (string|nil)      Code to execute in string form
        {python}       (string[]|nil)    Path to python executable and interpreter arguments
        {args}         (string[]|nil)    Command line arguments passed to the program
        {console}      (DebugpyConsole)  See |DebugpyConsole|
        {cwd}          (string|nil)      Absolute path to the working directory of the program being debugged.
        {env}          (table|nil)       Environment variables defined as key value pair
        {stopOnEntry}  (boolean|nil)     Stop at first line of user code.


DebugOpts                                                            *DebugOpts*


    Fields: ~
        {console}      (DebugpyConsole)                       See |DebugpyConsole|
        {test_runner}  ("unittest"|"pytest"|"django"|string)  name of the test runner. Default is |dappy.test_runner|
        {config}       (DebugpyConfig)                        Overrides for the configuration


BDDDebugOpts                                                      *BDDDebugOpts*


    Fields: ~
        {console}          (DebugpyConsole)                   See |DebugpyConsole|
        {bdd_test_runner}  ("cucumber"|string)                name of the test runner. Default is |dappy.bdd_test_runner|
        {config}           (DebugpyConfig)                    Overrides for the configuration


SetupOpts                                                            *SetupOpts*


    Fields: ~
        {include_configs}  (boolean)         Add default configurations
        {console}          (DebugpyConsole)  See |DebugpyConsole|
        {pythonPath}       (string|nil)      Path to python interpreter. Uses interpreter from `VIRTUAL_ENV` environment variable or `adapter_python_path` by default


TestRunner                                                          *TestRunner*
    fun(classname: string, methodname: string): string module, string[] args

    Type: ~
        fun(classname: string, methodname: string): string module, string[] args


BDDTestRunner                                                    *BDDTestRunner*
    fun(line_number: integer): string module, string[] args

    Type: ~
        fun(line_number: integer): string module, string[] args


DebugpyConsole                                                  *DebugpyConsole*


    Type: ~
        "internalConsole"|"integratedTerminal"|"externalTerminal"|nil


vim:tw=78:ts=8:noet:ft=help:norl:
