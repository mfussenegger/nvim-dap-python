================================================================================
Python extension for nvim-dap                                       *dap-python*

M.test_runner                                           *dap-python.test_runner*
     Test runner to use by default.
     The default value is dynamic and depends on `pytest.ini` or `manage.py` markers.
     If neither is found "unittest" is used. See |dap-python.test_runners|
     Override this to set a different runner:
     ```
     require('dap-python').test_runner = "pytest"
     ```

    Type: ~
        ((string|fun():string))  name of the test runner


M.resolve_python                                     *dap-python.resolve_python*
     Function to resolve path to python to use for program or test execution.
     By default the `VIRTUAL_ENV` and `CONDA_PREFIX` environment variables are
     used if present.

    Type: ~
        (nil|fun():nil|string)  name of the test runner


M.test_runners                                         *dap-python.test_runners*
     Table to register test runners.
     Built-in are test runners for unittest, pytest and django.
     The key is the test runner name, the value a function to generate the
     module name to run and its arguments. See |dap-python.TestRunner|

    Type: ~
        (table<string,TestRunner>)


M.setup({adapter_python_path}, {opts})                        *dap-python.setup*
     Register the python debug adapter

    Parameters: ~
        {adapter_python_path}  (string|nil)     Path to the python interpreter. Path must be absolute or in $PATH and needs to have the debugpy package installed. Default is `python3`
        {opts}                 (SetupOpts|nil)  See |dap-python.SetupOpts|


M.test_class({opts})                                     *dap-python.test_class*
     Run test class above cursor

    Parameters: ~
        {opts}  (DebugOpts)  See |dap-python.DebugOpts|


M.test_method({opts})                                   *dap-python.test_method*
     Run the test method above cursor

    Parameters: ~
        {opts}  (DebugOpts)  See |dap-python.DebugOpts|


M.debug_selection({opts})                           *dap-python.debug_selection*
     Debug the selected code

    Parameters: ~
        {opts}  (DebugOpts)


PathMapping                                             *dap-python.PathMapping*

    Fields: ~
        {localRoot}   (string)
        {remoteRoot}  (string)


DebugpyConfig                                         *dap-python.DebugpyConfig*

    Fields: ~
        {django}           (boolean|nil)        Enable django templates. Default is `false`
        {gevent}           (boolean|nil)        Enable debugging of gevent monkey-patched code. Default is `false`
        {jinja}            (boolean|nil)        Enable jinja2 template debugging. Default is `false`
        {justMyCode}       (boolean|nil)        Debug only user-written code. Default is `true`
        {pathMappings}     (PathMapping[]|nil)  Map of local and remote paths.
        {pyramid}          (boolean|nil)        Enable debugging of pyramid applications
        {redirectOutput}   (boolean|nil)        Redirect output to debug console. Default is `false`
        {showReturnValue}  (boolean|nil)        Shows return value of function when stepping
        {sudo}             (boolean|nil)        Run program under elevated permissions. Default is `false`


DebugpyLaunchConfig                             *dap-python.DebugpyLaunchConfig*
    : DebugpyConfig

    Fields: ~
        {module}       (string|nil)      Name of the module to debug
        {program}      (string|nil)      Absolute path to the program
        {code}         (string|nil)      Code to execute in string form
        {python}       (string[]|nil)    Path to python executable and interpreter arguments
        {args}         (string[]|nil)    Command line arguments passed to the program
        {console}      (DebugpyConsole)  See |dap-python.DebugpyConsole|
        {cwd}          (string|nil)      Absolute path to the working directory of the program being debugged.
        {env}          (table|nil)       Environment variables defined as key value pair
        {stopOnEntry}  (boolean|nil)     Stop at first line of user code.


DebugOpts                                                 *dap-python.DebugOpts*


    Fields: ~
        {console}      (DebugpyConsole)                       See |dap-python.DebugpyConsole|
        {test_runner}  ("unittest"|"pytest"|"django"|string)  name of the test runner. Default is |dap-python.test_runner|
        {config}       (DebugpyConfig)                        Overrides for the configuration


SetupOpts                                                 *dap-python.SetupOpts*


    Fields: ~
        {include_configs}  (boolean)         Add default configurations
        {console}          (DebugpyConsole)  See |dap-python.DebugpyConsole|
        {pythonPath}       (string|nil)      Path to python interpreter. Uses interpreter from `VIRTUAL_ENV` environment variable or `adapter_python_path` by default


TestRunner                                                          *TestRunner*
    string, methodname: string): string module, string[] args

    Type: ~
        fun(classname:


DebugpyConsole                                                  *DebugpyConsole*


    Type: ~
        "internalConsole"|"integratedTerminal"|"externalTerminal"|nil


vim:tw=78:ts=8:noet:ft=help:norl:
